:: CScript
    <center><h1>ChoiceScript to SugarCube/Twee Conversion in Tweego
    Table of Content</h1></center>
    The information in the pages below have been taken from the [[ChoiceScript Wiki|https://choicescriptdev.fandom.com/wiki/Structure_of_a_ChoiceScript_game]] and translated for use of the SugarCube/Twee format with the Tweego Compiler*. 
    
    If I am missing an important aspect of CScript which should be translated into Twine, please let me know!

    > <<link "Difference in Game Folders" "Folder">><</link>>
    > <<link "Scenes and Passages" "Scenes">><</link>>
    
    > <<link "Input Macros" "Input">><</link>>
    > <<link "*goto and Calling Scenes" "GoTo">><</link>>
    > <<link "Ending Page" "Ending">><</link>>

    > <<link "Formatting your Text" "Formatting">><</link>>
    > <<link "Miscellaneous" "Miscellaneous">><</link>>
    > <<link "Useful Templates and Documentation" "Templates">><</link>>
    
    > [[Start Menu|Start]] <
    
    *''Note'': Most can be applied to using SugarCube in the Twine app as well. The main difference is the use of the Twee Notation. See the [[Tweego Guide|Tweego]] for more information.

:: Folder [cscript]
    <center><h1>Difference in Game Folders</h1></center>
    Unlike CScript, Twine/Tweego has four important files (can actually be reduced to 2) located in 2 separate folders:
    <ul>
        <li><nowiki>.tw</nowiki>: the base code of your game in the Twee format.</li>
        <li><nowiki>.js</nowiki>: the JavaScript code (which can be included in the <nowiki>.tw</nowiki> file as a Passage with a [[Special Tag|Tags]])</li>
        <li><nowiki>.css</nowiki>: the CSS code (which can be included in the <nowiki>.tw</nowiki> file as a Passage with a [[Special Tag|Tags]])</li>
        <li><nowiki>.html</nowiki>: the compiled output, the only important file when publishing the project (and assets, if you have some)</li>
    </ul>
    When using Tweego, the first 3 need to be in the <nowiki> src </nowiki> folder, while the last one appears in the <nowiki> export </nowiki> folder when compiled (See [[Compiling]]). 
    
    You can add as many <nowiki>.tw</nowiki> files as you want. Tweego will compile everything at the end. For example, this HTML file is compiled of 4 <nowiki>.tw</nowiki> files.
    
    ''Note:'' In the Twine App, the system will compile your project to an HTML file as you edit it. The JavaScript and CSS have their own special window you can make your edits.

:: Scenes [cscript]
    <<code>><center><h1>Scenes (CScript) and Passages (Twine)</h1></center>
    <h2>Base Scenes:</h2>\
    You have some differences between Scenes and Passages, how they are set and how they work. Scenes in CScript refers to the story data (narrative and in-text code), while Passages in Twine refer to every "block" created, whether it is narrative scene with code, edting the UI (see [[Special Passages|Menu]]) or pure JS/CSS code (See [[Tags]]).
    
    Secondly, unlike CScript, Twine (and especially Twee) is not bound to indentation for the code to work. It can be useful to organise it however (especially with more complex code) but it is not necessary. The code is either bound to the HTML markup (<nowiki> < > </nowiki>) or the macros markup (<nowiki> << >> </nowiki>). However, adding a choice or page break in passages (<nowiki> <<link>> </nowiki> macro in Twine) will usually mean creating a new passage.

    CScript: <code>Lorem Ipsum
        *choice
        _ _ #choice 1
        _ _ _ _ Lorem Ipsum 2
        _ _ #choice 2
        _ _ _ _ Other Text</code>
    Twee: <code>:: Start
    Lorem Ipsum
    <nowiki><<link "Choice 1" "Next">><</link>></nowiki>
    <nowiki><<link "Choice 2" "Variant">><</link>></nowiki>
    
    :: Next
    Lorem Ipsum 2
    
    :: Variant
    Other Text</code>\

    Another important thing to remember is that when Tweego compiles your files, it will automatically find the links between each story Passages (scenes) through the <nowiki><<link>></nowiki> or <nowiki><<goto>></nowiki> macros, even if they are not in order or in the same <nowiki> .tw </nowiki> file. You can place your Passages in any order or in any <nowiki> .tw </nowiki> file you want (for example, the organisation of the passages behind this compiled file).
    ''Note:'' the Twine App has a visual map that lets you organise each passage with a click. The T3LT extension for VSCode has a similar function.

    However, CScript and the Twee/Twine logic and notation is very similar when it comes to coding. Many in-text code has a similarly named Twine equivalent in a slightly different formatting. For example when it comes to [[conditional statements|IfElse]]: 
    CScript: <nowiki> *if </nowiki>
    Twee: <nowiki> <<if>><</if>> </nowiki>

    As well, the formatting of [[Passages]] name is very similar to the ones of Scenes (save for punctuation), with their name also being case-sensitive.
    CScript: <nowiki> *label PassageName</nowiki>
    Twee: <nowiki>:: PassageName </nowiki>

:: Ending [cscript]
    <<code>><center><h1>Ending Page</h1></center>
    Twine/Twee does not have a function that ends a game like CScript *ending. Instead, you need create an "End" Page and send the player there (via a <nowiki><<link>></nowiki>).

    However, this way allows you more way to customise the "End" Scene how ever you would want. You are not bound to the 4 CScript option or base text. 

    <h2>Restart the Game</h2>\
    There are two ways you can send player back to the start: force the game to restart or send the player back to the first page. The first one is similar to the ChoiceScript version, while the second is more often used as a NewGame+ option.

    Whether to choose the first or second option depends on how you code the rest of the game. If your game's code relies on functions like <nowiki> hasVisited() </nowiki>, it is best to use the first option.

    Twee:<code><nowiki><<link "Restart">><<script>>UI.restart();<</script>><</link>></nowiki>
    <nowiki><<link "Restart" "Start">><</link>></nowiki></code>\
    ''Note:'' You can replace the link for a button if you want.

    <h2>Share the Game</h2>\
    Twine/Twee does not have specific script to share the game to other websites, but you are free to add as many hyperlinks as you want (see [[Formatting]]).



:: Miscellaneous [cscript]
    <<code>><center><h1>Miscellaneous</h1></center>
    Here, you will find other CScript commands I did not know where to place.

    <h2>Invisible Comment</h2>\
    CScript: <code>*comment a comment not seen by players</code>\
    Twee: <code>/*a comment not seen by players */ -> CSS format
    <!--a comment not seen by players --> -> HTML format</code>\

    <h2>Script and JavaScript</h2>\
    There are 2 ways of introducing JavaScript to the game: via the [[JavaScript file or Passage|Tags]] or in-passage with the <nowiki> <<script>><</script>> </nowiki> macro. 
    
    Both requires some knowledge of JavaScript (or know what to copy from tutorials).

    <h2>Bug Function</h2>\
    Unlike CScript, Twine does not have a built-in Quick/Random test. There does not seem to be an add-on to do it automatically either. You would need to manually test the game yourself (or have playtesters) to find whether your game is coded properly.

    However, if a macro is not set properly, the played file will show an error on the passage in which the macro is coded and why the macro is not working (ex: missing closing tag, wrong format, etc...). There is also a Debug version where you can play through your project and see whether variables are set in the right place or if conditional statements show the correct text. You can find the Debug version of this file in the export folder and how to create a Debug vergion [[here|Compiling]].

    If you want to avoid some errors with macros not set properly, I recommend using the T3LT extension in VSCode, which will show you whether Passages have the proper Twee notation, whether a Passage exists when setting a <nowiki><<link>></nowiki> or use <nowiki><<goto>></nowiki>, or whether a macro is properly closed or has all basic elements to function.

    <h2>Combining Variables</h2>\
    CScript: <code>*set firstname "Roger"
    *set lastname "Davis"
    *set fullname (firstname&" ")&lastname</code>\
    Twee: <code><nowiki><<set $firstname to "Roger">></nowiki>
    <nowiki><<set $lastname to "Davis">></nowiki>
    <nowiki><<set $fullname to $firstname + " " + $lastname>></nowiki></code>\

    <h2>Set Random Number</h2>
    CScript: <code>*temp dieroll 0
    *rand dieroll 0 7</code>\
    Twee: <code><nowiki><<set _temp to random(0, 7)>></nowiki></code>\

    <h2>The Switch Macro</h2>\
    The <nowiki><<switch>></nowiki> macro works with the same logic as the <nowiki><<if>></nowiki>, but focuses <u>only</u> on ONE variable. The macro will check whether variable in question has a value fitting the coded <nowiki><<case>></nowiki> before displaying the corresponding text (if it cannot find one, it will show the text in the <nowiki><<default>></nowiki> case). It is probably the closest equivalent to the Multireplace command in CScript, though you will need to define at least one case.

    You can use this macro to display variation of text following a choice in the previous passage or a variable's value. But, the <nowiki><<switch>></nowiki> macro is most useful in reducing the amount of named passages. One can combine smaller scenes without choices (only with a Continue/Next link) into one Passage.
    
    ''Choice/Variable dependent display:'' <code>:: Passage 1
    <nowiki><<links "Choice 1" "PassageName">><<set $variable to "ok">><</link>></nowiki>
    <nowiki><<links "Choice 2" "PassageName">><<set $variable to 1>><</link>></nowiki>
        <nowiki><<links "Choice 3" "PassageName">><<set $variable to false>><</link>></nowiki>
    :: PassageName
    <nowiki><<switch $variable>><<case 1>></nowiki>
    _ _ Variation 1
    <nowiki><<case false>></nowiki>
    _ _ Variation 2
    <nowiki><<default>></nowiki>
    _ _ Variation 3
    <nowiki><</switch>></nowiki></code>\
    ''Note:'' the example above would be the closest to Multireplace.

    ''Combining smaller passages:''<code>:: Passage 2
    <nowiki><<if ndef $text>><<set $text to 1>><</if>></nowiki>
    <nowiki><<switch $text>><<case 1>></nowiki>
    _ _ First part of the story
    <nowiki><<link "Next" `passage()`>><<set $text +=1>><</link>></nowiki>
    <nowiki><<case 2>></nowiki>
    _ _ Second part of the story
    <nowiki><<link "Next" `passage()`>><<set $text +=1>><</link>></nowiki>
    <nowiki><<default>></nowiki>
    _ _ Last part of the story
    <nowiki><<link "Next" "PassageName">><<unset $text>><</link>></nowiki>
    <nowiki><</switch>></nowiki></code>\
    ''Note:'' <nowiki>`passage()`</nowiki> in the link will tell the system to go again in that passage (:: Passage 2, here), but to include all changed values of variable (here, the value of $text in the link). However, it is recommended to use {{{<<link "Next" >><<replace '.passage'>><<include `passage()`>><</replace>><<set $text +=1>><</link>>}}} instead.

    ''Note'': the <nowiki><<replace>></nowiki> macro can be used for other things, like create an error message for an [[input macro|Input]]. In order for that macro to work, it needs the item to be replace to be wrappped in the HTML <nowiki><span></nowiki> markup.

:: Input [cscript]
    <<code>><center><h1>Input Macros</h1></center>
    Unlike CScript, you won't need to set a variable before using an input macro. That variable can be first seen in those macros, with the input setting the macro directly. You also have multiple ways to interactively input variables. All these macros are visible in the [[Basic Macros]] page.

    CScript: <code>*input_text name
    *input_number coins 50 100</code>\
    Twee: <code><nowiki><<textbox "$name" "Henry">></nowiki>
    <nowiki><<numberbox "$wager" 100>></nowiki></code>\
    ''Note:'' both the textbox and numberbox can include an initial value (the last item before the >>), but it can be optional.

    <h2>Other Input Macros</h2>
    There are other Interactive Macros to input variables. For all macros included below, you can input numberical and string values. For some, you can also input a boolean value. 

    ''Checkboxes''
    Often use for character creation, especially for aspects where a player can have multiple choices, or for inventory. For the full customisation, see the [[SugarCube Documentation|https://www.motoslave.net/sugarcube/2/docs/#macros-macro-checkbox]]
    <code><nowiki>* <<checkbox "$item1" false true>> Item 1?</nowiki>
    <nowiki>* <<checkbox "$item2" false true>> Item 2?</nowiki>
    <nowiki>* <<checkbox "$item2" false true>> Item 3?</nowiki></code>
    ''Note:'' Instead of boolean, you can assign other types of values when an option is checked or not. 

    ''Radiobutton''
    Similarly to the previous macro, it is open used in Character creation but when players can only choose one option. For the full customisation, see the [[SugarCube Documentation|https://www.motoslave.net/sugarcube/2/docs/#macros-macro-radiobutton]]
    <code><nowiki>* <<radiobutton  "$item" "blue">> Type 1?</nowiki>
    <nowiki>* <<radiobutton  "$item" 1>> Type 2?</nowiki>
    <nowiki>* <<radiobutton  "$item" true>> Type 3?</nowiki></code>\

    ''Cycling''
    With this macro, you can create a fake link, which, when clicked on, will cycle through options. For the full customisation, see the [[SugarCube Documentation|https://www.motoslave.net/sugarcube/2/docs/#macros-macro-cycle]]
    <code><nowiki><<cycle "$answer" autoselect>></nowiki>
        <nowiki><<option "Towel">></nowiki>
        <nowiki><<option "π" 3.14159>></nowiki>
        <nowiki><<option 42>></nowiki>
        <nowiki><<option false>></nowiki>
        <nowiki><<option "∞" Infinity>></nowiki>
    <nowiki><</cycle>></nowiki></code>\

    ''Listbox''
    With this macro, you will create a retractable list of option for the player to choose from. For the full customisation, see the [[SugarCube Documentation|https://www.motoslave.net/sugarcube/2/docs/#macros-macro-listbox]]
    <code><nowiki><<listbox "$answer" autoselect>></nowiki>
        <nowiki><<option "Towel">></nowiki>
        <nowiki><<option "π" 3.14159>></nowiki>
        <nowiki><<option 42>></nowiki>
        <nowiki><<option false>></nowiki>
        <nowiki><<option "∞" Infinity>></nowiki>
    <nowiki><</listbox>></nowiki></code>
:: Formatting [cscript]
    <<code>><center><h1>Formatting your Text</h1></center>
    There is more freedom in Twine/Twee to format your text, you can have more than just bold and italics. Since the compiled file becomes a HTML file, you can use any HTML markup to format your text. You can also use Twine/Twee specific markup as well. For the full list, see the [[SugarCube Documentation|http://www.motoslave.net/sugarcube/2/docs/#markup-style]]

    CScript: <nowiki>[b]Bold[/b] | [i]Italics[/i]</nowiki>
    Twee: <nowiki>''Bold'' | //Italics//</nowiki>

    <h3>Hyperlinks</h3>\
    When it comes to hyperlinks, you will need to use the [[Link Markup|https://www.motoslave.net/sugarcube/2/docs/#markup-link]].

    CScript: <nowiki>*link https://www.website.com LinkName</nowiki>
    Twee: <nowiki>[[LinkName|https://www.website.com]]</nowiki>

    <h3>Font, Colour, Size, etc...</h3>\
    There are multiple ways of changing the styling of text and links. One way is to use the [[CSS Stylesheet|Interface]] (where you can change the Styling of the whole page), the other is to change it in-text. You can use the HTML markup or the Twine/Twee annotation.

    Twee : <code><nowiki>@@style-list;Text@@</nowiki>
    <nowiki><span style="style-list">Text</span></nowiki></code>\
    ''Note:'' Text alignment works the same way, though you may need to use <nowiki> <p> </nowiki> or <nowiki> <div> </nowiki> instead of <nowiki> <span> </nowiki>.

:: Templates [cscript]
    <center><h1>Useful Templates and Documentation</h1></center>
    Here you can find all official documentation for Twine, Twee and SugarCube, as well as relevant tutorials, coding communities and helpers, templates and assets.
    If you found this guide useful, you may find my [[SugarCube 2 Guide|https://manonamora.itch.io/twine-sugarcube-guide]] interesting, to go further with the program.

    <h2>Sugarcube Documentation and Useful Communities:</h2>\
    <ul>
        <li>[[The official SugarCube documentation|http://www.motoslave.net/sugarcube/2/docs/]]</li>
        <li>[[The Twinery Cookbook|http://twinery.org/cookbook/]] : Twine 2 Examples, SugarCube format for each entry.</li>
        <li>[[The Interactive Fiction Forum|https://intfiction.org/]]</li>
        <li>[[The official Twine Discord|https://discordapp.com/invite/n5dJvPp]]</li>
    </ul>
    <h2>Useful Guides:</h2>\
    <ul>
        <li>[[Grim Baccaris' Guides|https://gcbaccaris.itch.io]]</li>
        <li>[[Yi Weng|https://www.youtube.com/watch?v=5QyXZ7XRasA&list=PL5YOcupubqyTLWQnIqfHdoeBLFxbWcbWX]]'s Youtube Guide for moving from CScript to SugarCube.</li>
        <li>Youtube: [[Adam Hammond|https://www.youtube.com/channel/UCJP9KsNr3DEdOVeHUsI0fXQ]], [[Dan Cox|https://www.youtube.com/c/DanCox]]</li>
        <li>Tumblr: [[cerberus|https://cerberus-writes.tumblr.com/tagged/coding]], [[idrellegames|https://idrellegames.tumblr.com/post/664858800855089152/coding-in-twine-other-resources]] (not taking new requests), [[manonamora (me)|https://manonamora-if.tumblr.com/post/694289176538087424/coding-support-masterlist]] and [[nyehilism|https://nyehilismwriting.tumblr.com/post/664644395515199488/twine-coding-masterlist]]</li>
    </ul>\
    <h2>Useful Templates and Macros:</h2>\
    <ul>
        <li>Brushmen's [[Template Emulating the CS UI|https://brushmen.itch.io/cs-like-sugarcube-template]], including the Stats Page and Fairmath widgets.</li>
        <li>Albie's [[Character Creation Template|https://gamesbyalbie.itch.io/character-page-tutorial]], including Pronouns Setting and Stats Page.</li>
        <li>[[Chapel's Macros|https://twinelab.net/custom-macros-for-sugarcube-2/demo/]], includes Pronouns Settings and Stats Bar creation, Fairmath calculations.</li>
        <li>[[HiEv's Macro|https://qjzhvmqlzvoo5lqnrvuhmg.on.drv.tw/UInv/Sample_Code.html#Main%20Menu]], includes Pronouns Settings and Stats Bar creation</li>
        <li>Other UI Templates: [[a.w. Morgan|https://awmorgan.itch.io/]], [[cerberus|https://ccrberus.itch.io/]], [[nyehilism|https://nyehilism.itch.io/]], [[manonamora (me)|https://manonamora.itch.io/]] and [[Vanya|https://vahnya.itch.io/]] </li>
    </ul>
    For a comprehensive list of resources for Twine: [[Check this List|https://www.tumblr.com/manonamora-if/700577877042888704/interactive-fiction-twine-resource-megalist]]